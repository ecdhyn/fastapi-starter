# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ....core.datetime_utils import serialize_datetime
from ...tag.types.deployment_tag import DeploymentTag
from ...tag.types.tag import Tag
from ...transcript.types.transcript import Transcript
from .version_context import VersionContext

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class Prompt(pydantic.BaseModel):
    id: str = pydantic.Field(description="the unique ArgoID for the prompt")
    name: str = pydantic.Field(description="name of prompt")
    content: str = pydantic.Field(description="content of the prompt")
    transcripts: typing.List[Transcript] = pydantic.Field(description="List of Transcript")
    tags: typing.List[Tag] = pydantic.Field(description="List of Tag")
    deployment_tag: DeploymentTag = pydantic.Field(
        description="a special tag to keep track of development stage (development, stage, production)"
    )
    create_time: dt.datetime
    prompt_variables: typing.List[str] = pydantic.Field(description="all prompt variables associated with the prompt")
    version_context: VersionContext = pydantic.Field(description="**readonly** context object to get related prompts")
    additional_comments: str = pydantic.Field(
        description="provide comments and extra information on the usage of the prompt"
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        extra = pydantic.Extra.forbid
        json_encoders = {dt.datetime: serialize_datetime}
