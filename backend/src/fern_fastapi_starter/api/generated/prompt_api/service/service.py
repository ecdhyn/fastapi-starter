# This file was auto-generated by Fern from our API Definition.

import abc
import functools
import inspect
import logging
import typing

import fastapi

from ...core.abstract_fern_service import AbstractFernService
from ...core.exceptions.fern_http_exception import FernHTTPException
from ...core.route_args import get_route_args
from ...security import ApiAuth, FernAuth
from ...types.errors.errors.bad_request_error import BadRequestError
from ...types.errors.errors.internal_server_error import InternalServerError
from ...types.errors.errors.unauthorized_error import UnauthorizedError
from ...types.prompt.types.prompt import Prompt
from ...types.transcript.types.transcript import Transcript
from ...types.transcript.types.transcript_request import TranscriptRequest


class AbstractPromptApiService(AbstractFernService):
    """
    AbstractPromptApiService is an abstract class containing the methods that you should implement.

    Each method is associated with an API route, which will be registered
    with FastAPI when you register your implementation using Fern's register()
    function.
    """

    @abc.abstractmethod
    def get_prompt(self, *, phone_number: str, auth: ApiAuth) -> Prompt:
        """
        Retrieves the prompt for phone bot given a phone number
        """
        ...

    @abc.abstractmethod
    def post_transcript(self, *, body: TranscriptRequest, prompt_id: str, auth: ApiAuth) -> Transcript:
        """
        Receives a transcript in the body of the POST from the Transcript API and assigns it to the associated prompt in ProMan
        """
        ...

    """
    Below are internal methods used by Fern to register your implementation.
    You can ignore them.
    """

    @classmethod
    def _init_fern(cls, router: fastapi.APIRouter) -> None:
        cls.__init_get_prompt(router=router)
        cls.__init_post_transcript(router=router)

    @classmethod
    def __init_get_prompt(cls, router: fastapi.APIRouter) -> None:
        endpoint_function = inspect.signature(cls.get_prompt)
        new_parameters: typing.List[inspect.Parameter] = []
        for index, (parameter_name, parameter) in enumerate(endpoint_function.parameters.items()):
            if index == 0:
                new_parameters.append(parameter.replace(default=fastapi.Depends(cls)))
            elif parameter_name == "phone_number":
                new_parameters.append(parameter.replace(default=fastapi.Query(default=...)))
            elif parameter_name == "auth":
                new_parameters.append(parameter.replace(default=fastapi.Depends(FernAuth)))
            else:
                new_parameters.append(parameter)
        setattr(cls.get_prompt, "__signature__", endpoint_function.replace(parameters=new_parameters))

        @functools.wraps(cls.get_prompt)
        def wrapper(*args: typing.Any, **kwargs: typing.Any) -> Prompt:
            try:
                return cls.get_prompt(*args, **kwargs)
            except (BadRequestError, UnauthorizedError, InternalServerError) as e:
                raise e
            except FernHTTPException as e:
                logging.getLogger(f"{cls.__module__}.{cls.__name__}").warn(
                    f"Endpoint 'get_prompt' unexpectedly threw {e.__class__.__name__}. "
                    + f"If this was intentional, please add {e.__class__.__name__} to "
                    + "the endpoint's errors list in your Fern Definition."
                )
                raise e

        # this is necessary for FastAPI to find forward-ref'ed type hints.
        # https://github.com/tiangolo/fastapi/pull/5077
        wrapper.__globals__.update(cls.get_prompt.__globals__)

        router.get(
            path="/v1/prompts",
            response_model=Prompt,
            description=AbstractPromptApiService.get_prompt.__doc__,
            **get_route_args(cls.get_prompt, default_tag="prompt_api"),
        )(wrapper)

    @classmethod
    def __init_post_transcript(cls, router: fastapi.APIRouter) -> None:
        endpoint_function = inspect.signature(cls.post_transcript)
        new_parameters: typing.List[inspect.Parameter] = []
        for index, (parameter_name, parameter) in enumerate(endpoint_function.parameters.items()):
            if index == 0:
                new_parameters.append(parameter.replace(default=fastapi.Depends(cls)))
            elif parameter_name == "body":
                new_parameters.append(parameter.replace(default=fastapi.Body(...)))
            elif parameter_name == "prompt_id":
                new_parameters.append(parameter.replace(default=fastapi.Path(...)))
            elif parameter_name == "auth":
                new_parameters.append(parameter.replace(default=fastapi.Depends(FernAuth)))
            else:
                new_parameters.append(parameter)
        setattr(cls.post_transcript, "__signature__", endpoint_function.replace(parameters=new_parameters))

        @functools.wraps(cls.post_transcript)
        def wrapper(*args: typing.Any, **kwargs: typing.Any) -> Transcript:
            try:
                return cls.post_transcript(*args, **kwargs)
            except (BadRequestError, UnauthorizedError, InternalServerError) as e:
                raise e
            except FernHTTPException as e:
                logging.getLogger(f"{cls.__module__}.{cls.__name__}").warn(
                    f"Endpoint 'post_transcript' unexpectedly threw {e.__class__.__name__}. "
                    + f"If this was intentional, please add {e.__class__.__name__} to "
                    + "the endpoint's errors list in your Fern Definition."
                )
                raise e

        # this is necessary for FastAPI to find forward-ref'ed type hints.
        # https://github.com/tiangolo/fastapi/pull/5077
        wrapper.__globals__.update(cls.post_transcript.__globals__)

        router.post(
            path="/v1/prompts/{prompt_id}/transcripts",
            response_model=Transcript,
            description=AbstractPromptApiService.post_transcript.__doc__,
            **get_route_args(cls.post_transcript, default_tag="prompt_api"),
        )(wrapper)
