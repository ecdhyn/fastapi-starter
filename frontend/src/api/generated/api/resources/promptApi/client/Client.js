/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import { ProManApi } from "../../../..";
import urlJoin from "url-join";
import * as serializers from "../../../../serialization";
import * as errors from "../../../../errors";
export class PromptApi {
    options;
    constructor(options) {
        this.options = options;
    }
    /**
     * Retrieves the prompt for phone bot given a phone number
     * @throws {ProManApi.types.BadRequestError}
     * @throws {ProManApi.types.UnauthorizedError}
     * @throws {ProManApi.types.InternalServerError}
     */
    async getPrompt(request) {
        const { phoneNumber } = request;
        const _queryParams = new URLSearchParams();
        _queryParams.append("phone_number", phoneNumber);
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment ?? environments.ProManApiEnvironment.Local, "/v1/prompts"),
            method: "GET",
            contentType: "application/json",
            queryParameters: _queryParams,
        });
        if (_response.ok) {
            return await serializers.types.Prompt.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
            });
        }
        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new ProManApi.types.BadRequestError(await serializers.types.BadRequestErrorBody.parseOrThrow(_response.error.body, {
                        unrecognizedObjectKeys: "passthrough",
                        allowUnrecognizedUnionMembers: true,
                        allowUnrecognizedEnumValues: true,
                    }));
                case 401:
                    throw new ProManApi.types.UnauthorizedError(await serializers.types.UnauthorizedErrorBody.parseOrThrow(_response.error.body, {
                        unrecognizedObjectKeys: "passthrough",
                        allowUnrecognizedUnionMembers: true,
                        allowUnrecognizedEnumValues: true,
                    }));
                case 500:
                    throw new ProManApi.types.InternalServerError(await serializers.types.InternalServerErrorBody.parseOrThrow(_response.error.body, {
                        unrecognizedObjectKeys: "passthrough",
                        allowUnrecognizedUnionMembers: true,
                        allowUnrecognizedEnumValues: true,
                    }));
                default:
                    throw new errors.ProManApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }
        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ProManApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.ProManApiTimeoutError();
            case "unknown":
                throw new errors.ProManApiError({
                    message: _response.error.errorMessage,
                });
        }
    }
    /**
     * Receives a transcript in the body of the POST from the Transcript API and assigns it to the associated prompt in ProMan
     * @throws {ProManApi.types.BadRequestError}
     * @throws {ProManApi.types.UnauthorizedError}
     * @throws {ProManApi.types.InternalServerError}
     */
    async postTranscript(promptId, request) {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment ?? environments.ProManApiEnvironment.Local, `/v1/prompts/${promptId}/transcripts`),
            method: "POST",
            contentType: "application/json",
            body: await serializers.types.TranscriptRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
        });
        if (_response.ok) {
            return await serializers.types.Transcript.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
            });
        }
        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new ProManApi.types.BadRequestError(await serializers.types.BadRequestErrorBody.parseOrThrow(_response.error.body, {
                        unrecognizedObjectKeys: "passthrough",
                        allowUnrecognizedUnionMembers: true,
                        allowUnrecognizedEnumValues: true,
                    }));
                case 401:
                    throw new ProManApi.types.UnauthorizedError(await serializers.types.UnauthorizedErrorBody.parseOrThrow(_response.error.body, {
                        unrecognizedObjectKeys: "passthrough",
                        allowUnrecognizedUnionMembers: true,
                        allowUnrecognizedEnumValues: true,
                    }));
                case 500:
                    throw new ProManApi.types.InternalServerError(await serializers.types.InternalServerErrorBody.parseOrThrow(_response.error.body, {
                        unrecognizedObjectKeys: "passthrough",
                        allowUnrecognizedUnionMembers: true,
                        allowUnrecognizedEnumValues: true,
                    }));
                default:
                    throw new errors.ProManApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }
        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ProManApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.ProManApiTimeoutError();
            case "unknown":
                throw new errors.ProManApiError({
                    message: _response.error.errorMessage,
                });
        }
    }
}
